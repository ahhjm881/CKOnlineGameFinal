// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_2eproto;
namespace CKPacket {
class Invalid;
struct InvalidDefaultTypeInternal;
extern InvalidDefaultTypeInternal _Invalid_default_instance_;
class SYSTEM_USER_CONNECT;
struct SYSTEM_USER_CONNECTDefaultTypeInternal;
extern SYSTEM_USER_CONNECTDefaultTypeInternal _SYSTEM_USER_CONNECT_default_instance_;
class SYSTEM_USER_DISCONNECT;
struct SYSTEM_USER_DISCONNECTDefaultTypeInternal;
extern SYSTEM_USER_DISCONNECTDefaultTypeInternal _SYSTEM_USER_DISCONNECT_default_instance_;
class SystemEnd;
struct SystemEndDefaultTypeInternal;
extern SystemEndDefaultTypeInternal _SystemEnd_default_instance_;
}  // namespace CKPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::CKPacket::Invalid* Arena::CreateMaybeMessage<::CKPacket::Invalid>(Arena*);
template<> ::CKPacket::SYSTEM_USER_CONNECT* Arena::CreateMaybeMessage<::CKPacket::SYSTEM_USER_CONNECT>(Arena*);
template<> ::CKPacket::SYSTEM_USER_DISCONNECT* Arena::CreateMaybeMessage<::CKPacket::SYSTEM_USER_DISCONNECT>(Arena*);
template<> ::CKPacket::SystemEnd* Arena::CreateMaybeMessage<::CKPacket::SystemEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CKPacket {

// ===================================================================

class Invalid final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.Invalid) */ {
 public:
  inline Invalid() : Invalid(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Invalid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Invalid(const Invalid& from);
  Invalid(Invalid&& from) noexcept
    : Invalid() {
    *this = ::std::move(from);
  }

  inline Invalid& operator=(const Invalid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invalid& operator=(Invalid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Invalid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Invalid* internal_default_instance() {
    return reinterpret_cast<const Invalid*>(
               &_Invalid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Invalid& a, Invalid& b) {
    a.Swap(&b);
  }
  inline void Swap(Invalid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Invalid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Invalid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Invalid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Invalid& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Invalid& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.Invalid";
  }
  protected:
  explicit Invalid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.Invalid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class SystemEnd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.SystemEnd) */ {
 public:
  inline SystemEnd() : SystemEnd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SystemEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemEnd(const SystemEnd& from);
  SystemEnd(SystemEnd&& from) noexcept
    : SystemEnd() {
    *this = ::std::move(from);
  }

  inline SystemEnd& operator=(const SystemEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemEnd& operator=(SystemEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemEnd* internal_default_instance() {
    return reinterpret_cast<const SystemEnd*>(
               &_SystemEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemEnd& a, SystemEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SystemEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SystemEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.SystemEnd";
  }
  protected:
  explicit SystemEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.SystemEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class SYSTEM_USER_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.SYSTEM_USER_DISCONNECT) */ {
 public:
  inline SYSTEM_USER_DISCONNECT() : SYSTEM_USER_DISCONNECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SYSTEM_USER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SYSTEM_USER_DISCONNECT(const SYSTEM_USER_DISCONNECT& from);
  SYSTEM_USER_DISCONNECT(SYSTEM_USER_DISCONNECT&& from) noexcept
    : SYSTEM_USER_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline SYSTEM_USER_DISCONNECT& operator=(const SYSTEM_USER_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SYSTEM_USER_DISCONNECT& operator=(SYSTEM_USER_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SYSTEM_USER_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SYSTEM_USER_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const SYSTEM_USER_DISCONNECT*>(
               &_SYSTEM_USER_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SYSTEM_USER_DISCONNECT& a, SYSTEM_USER_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(SYSTEM_USER_DISCONNECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SYSTEM_USER_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SYSTEM_USER_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SYSTEM_USER_DISCONNECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SYSTEM_USER_DISCONNECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SYSTEM_USER_DISCONNECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.SYSTEM_USER_DISCONNECT";
  }
  protected:
  explicit SYSTEM_USER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.SYSTEM_USER_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class SYSTEM_USER_CONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.SYSTEM_USER_CONNECT) */ {
 public:
  inline SYSTEM_USER_CONNECT() : SYSTEM_USER_CONNECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SYSTEM_USER_CONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SYSTEM_USER_CONNECT(const SYSTEM_USER_CONNECT& from);
  SYSTEM_USER_CONNECT(SYSTEM_USER_CONNECT&& from) noexcept
    : SYSTEM_USER_CONNECT() {
    *this = ::std::move(from);
  }

  inline SYSTEM_USER_CONNECT& operator=(const SYSTEM_USER_CONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SYSTEM_USER_CONNECT& operator=(SYSTEM_USER_CONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SYSTEM_USER_CONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SYSTEM_USER_CONNECT* internal_default_instance() {
    return reinterpret_cast<const SYSTEM_USER_CONNECT*>(
               &_SYSTEM_USER_CONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SYSTEM_USER_CONNECT& a, SYSTEM_USER_CONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(SYSTEM_USER_CONNECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SYSTEM_USER_CONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SYSTEM_USER_CONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SYSTEM_USER_CONNECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SYSTEM_USER_CONNECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SYSTEM_USER_CONNECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.SYSTEM_USER_CONNECT";
  }
  protected:
  explicit SYSTEM_USER_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.SYSTEM_USER_CONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_system_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Invalid

// -------------------------------------------------------------------

// SystemEnd

// -------------------------------------------------------------------

// SYSTEM_USER_DISCONNECT

// -------------------------------------------------------------------

// SYSTEM_USER_CONNECT

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CKPacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2eproto

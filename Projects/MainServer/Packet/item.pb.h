// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_item_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_item_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_item_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_item_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_item_2eproto;
namespace CKPacket {
class reqPing;
struct reqPingDefaultTypeInternal;
extern reqPingDefaultTypeInternal _reqPing_default_instance_;
class reqPlayerPosition;
struct reqPlayerPositionDefaultTypeInternal;
extern reqPlayerPositionDefaultTypeInternal _reqPlayerPosition_default_instance_;
class reqReplicatedPlayerDes;
struct reqReplicatedPlayerDesDefaultTypeInternal;
extern reqReplicatedPlayerDesDefaultTypeInternal _reqReplicatedPlayerDes_default_instance_;
class reqReplicatedPlayerGen;
struct reqReplicatedPlayerGenDefaultTypeInternal;
extern reqReplicatedPlayerGenDefaultTypeInternal _reqReplicatedPlayerGen_default_instance_;
class resPing;
struct resPingDefaultTypeInternal;
extern resPingDefaultTypeInternal _resPing_default_instance_;
class resPlayerJoin;
struct resPlayerJoinDefaultTypeInternal;
extern resPlayerJoinDefaultTypeInternal _resPlayerJoin_default_instance_;
class resPlayerPosition;
struct resPlayerPositionDefaultTypeInternal;
extern resPlayerPositionDefaultTypeInternal _resPlayerPosition_default_instance_;
class resReplicatedPlayerDes;
struct resReplicatedPlayerDesDefaultTypeInternal;
extern resReplicatedPlayerDesDefaultTypeInternal _resReplicatedPlayerDes_default_instance_;
class resReplicatedPlayerGen;
struct resReplicatedPlayerGenDefaultTypeInternal;
extern resReplicatedPlayerGenDefaultTypeInternal _resReplicatedPlayerGen_default_instance_;
}  // namespace CKPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::CKPacket::reqPing* Arena::CreateMaybeMessage<::CKPacket::reqPing>(Arena*);
template<> ::CKPacket::reqPlayerPosition* Arena::CreateMaybeMessage<::CKPacket::reqPlayerPosition>(Arena*);
template<> ::CKPacket::reqReplicatedPlayerDes* Arena::CreateMaybeMessage<::CKPacket::reqReplicatedPlayerDes>(Arena*);
template<> ::CKPacket::reqReplicatedPlayerGen* Arena::CreateMaybeMessage<::CKPacket::reqReplicatedPlayerGen>(Arena*);
template<> ::CKPacket::resPing* Arena::CreateMaybeMessage<::CKPacket::resPing>(Arena*);
template<> ::CKPacket::resPlayerJoin* Arena::CreateMaybeMessage<::CKPacket::resPlayerJoin>(Arena*);
template<> ::CKPacket::resPlayerPosition* Arena::CreateMaybeMessage<::CKPacket::resPlayerPosition>(Arena*);
template<> ::CKPacket::resReplicatedPlayerDes* Arena::CreateMaybeMessage<::CKPacket::resReplicatedPlayerDes>(Arena*);
template<> ::CKPacket::resReplicatedPlayerGen* Arena::CreateMaybeMessage<::CKPacket::resReplicatedPlayerGen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CKPacket {

// ===================================================================

class resPlayerJoin final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.resPlayerJoin) */ {
 public:
  inline resPlayerJoin() : resPlayerJoin(nullptr) {}
  explicit PROTOBUF_CONSTEXPR resPlayerJoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resPlayerJoin(const resPlayerJoin& from);
  resPlayerJoin(resPlayerJoin&& from) noexcept
    : resPlayerJoin() {
    *this = ::std::move(from);
  }

  inline resPlayerJoin& operator=(const resPlayerJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline resPlayerJoin& operator=(resPlayerJoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resPlayerJoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const resPlayerJoin* internal_default_instance() {
    return reinterpret_cast<const resPlayerJoin*>(
               &_resPlayerJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(resPlayerJoin& a, resPlayerJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(resPlayerJoin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resPlayerJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resPlayerJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resPlayerJoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const resPlayerJoin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const resPlayerJoin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.resPlayerJoin";
  }
  protected:
  explicit resPlayerJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.resPlayerJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class reqPing final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.reqPing) */ {
 public:
  inline reqPing() : reqPing(nullptr) {}
  explicit PROTOBUF_CONSTEXPR reqPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reqPing(const reqPing& from);
  reqPing(reqPing&& from) noexcept
    : reqPing() {
    *this = ::std::move(from);
  }

  inline reqPing& operator=(const reqPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline reqPing& operator=(reqPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reqPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const reqPing* internal_default_instance() {
    return reinterpret_cast<const reqPing*>(
               &_reqPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(reqPing& a, reqPing& b) {
    a.Swap(&b);
  }
  inline void Swap(reqPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reqPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reqPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reqPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const reqPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const reqPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.reqPing";
  }
  protected:
  explicit reqPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.reqPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class resPing final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.resPing) */ {
 public:
  inline resPing() : resPing(nullptr) {}
  explicit PROTOBUF_CONSTEXPR resPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resPing(const resPing& from);
  resPing(resPing&& from) noexcept
    : resPing() {
    *this = ::std::move(from);
  }

  inline resPing& operator=(const resPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline resPing& operator=(resPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const resPing* internal_default_instance() {
    return reinterpret_cast<const resPing*>(
               &_resPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(resPing& a, resPing& b) {
    a.Swap(&b);
  }
  inline void Swap(resPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const resPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const resPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.resPing";
  }
  protected:
  explicit resPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.resPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class reqPlayerPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.reqPlayerPosition) */ {
 public:
  inline reqPlayerPosition() : reqPlayerPosition(nullptr) {}
  ~reqPlayerPosition() override;
  explicit PROTOBUF_CONSTEXPR reqPlayerPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reqPlayerPosition(const reqPlayerPosition& from);
  reqPlayerPosition(reqPlayerPosition&& from) noexcept
    : reqPlayerPosition() {
    *this = ::std::move(from);
  }

  inline reqPlayerPosition& operator=(const reqPlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline reqPlayerPosition& operator=(reqPlayerPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reqPlayerPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const reqPlayerPosition* internal_default_instance() {
    return reinterpret_cast<const reqPlayerPosition*>(
               &_reqPlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(reqPlayerPosition& a, reqPlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(reqPlayerPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reqPlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reqPlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reqPlayerPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reqPlayerPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const reqPlayerPosition& from) {
    reqPlayerPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reqPlayerPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.reqPlayerPosition";
  }
  protected:
  explicit reqPlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional int32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.reqPlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
    int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class resPlayerPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.resPlayerPosition) */ {
 public:
  inline resPlayerPosition() : resPlayerPosition(nullptr) {}
  ~resPlayerPosition() override;
  explicit PROTOBUF_CONSTEXPR resPlayerPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resPlayerPosition(const resPlayerPosition& from);
  resPlayerPosition(resPlayerPosition&& from) noexcept
    : resPlayerPosition() {
    *this = ::std::move(from);
  }

  inline resPlayerPosition& operator=(const resPlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline resPlayerPosition& operator=(resPlayerPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resPlayerPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const resPlayerPosition* internal_default_instance() {
    return reinterpret_cast<const resPlayerPosition*>(
               &_resPlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(resPlayerPosition& a, resPlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(resPlayerPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resPlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resPlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resPlayerPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resPlayerPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const resPlayerPosition& from) {
    resPlayerPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resPlayerPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.resPlayerPosition";
  }
  protected:
  explicit resPlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional int32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.resPlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
    int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class resReplicatedPlayerGen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.resReplicatedPlayerGen) */ {
 public:
  inline resReplicatedPlayerGen() : resReplicatedPlayerGen(nullptr) {}
  ~resReplicatedPlayerGen() override;
  explicit PROTOBUF_CONSTEXPR resReplicatedPlayerGen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resReplicatedPlayerGen(const resReplicatedPlayerGen& from);
  resReplicatedPlayerGen(resReplicatedPlayerGen&& from) noexcept
    : resReplicatedPlayerGen() {
    *this = ::std::move(from);
  }

  inline resReplicatedPlayerGen& operator=(const resReplicatedPlayerGen& from) {
    CopyFrom(from);
    return *this;
  }
  inline resReplicatedPlayerGen& operator=(resReplicatedPlayerGen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resReplicatedPlayerGen& default_instance() {
    return *internal_default_instance();
  }
  static inline const resReplicatedPlayerGen* internal_default_instance() {
    return reinterpret_cast<const resReplicatedPlayerGen*>(
               &_resReplicatedPlayerGen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(resReplicatedPlayerGen& a, resReplicatedPlayerGen& b) {
    a.Swap(&b);
  }
  inline void Swap(resReplicatedPlayerGen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resReplicatedPlayerGen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resReplicatedPlayerGen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resReplicatedPlayerGen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resReplicatedPlayerGen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const resReplicatedPlayerGen& from) {
    resReplicatedPlayerGen::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resReplicatedPlayerGen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.resReplicatedPlayerGen";
  }
  protected:
  explicit resReplicatedPlayerGen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.resReplicatedPlayerGen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class resReplicatedPlayerDes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.resReplicatedPlayerDes) */ {
 public:
  inline resReplicatedPlayerDes() : resReplicatedPlayerDes(nullptr) {}
  ~resReplicatedPlayerDes() override;
  explicit PROTOBUF_CONSTEXPR resReplicatedPlayerDes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resReplicatedPlayerDes(const resReplicatedPlayerDes& from);
  resReplicatedPlayerDes(resReplicatedPlayerDes&& from) noexcept
    : resReplicatedPlayerDes() {
    *this = ::std::move(from);
  }

  inline resReplicatedPlayerDes& operator=(const resReplicatedPlayerDes& from) {
    CopyFrom(from);
    return *this;
  }
  inline resReplicatedPlayerDes& operator=(resReplicatedPlayerDes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resReplicatedPlayerDes& default_instance() {
    return *internal_default_instance();
  }
  static inline const resReplicatedPlayerDes* internal_default_instance() {
    return reinterpret_cast<const resReplicatedPlayerDes*>(
               &_resReplicatedPlayerDes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(resReplicatedPlayerDes& a, resReplicatedPlayerDes& b) {
    a.Swap(&b);
  }
  inline void Swap(resReplicatedPlayerDes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resReplicatedPlayerDes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resReplicatedPlayerDes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resReplicatedPlayerDes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resReplicatedPlayerDes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const resReplicatedPlayerDes& from) {
    resReplicatedPlayerDes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resReplicatedPlayerDes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.resReplicatedPlayerDes";
  }
  protected:
  explicit resReplicatedPlayerDes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.resReplicatedPlayerDes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class reqReplicatedPlayerGen final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CKPacket.reqReplicatedPlayerGen) */ {
 public:
  inline reqReplicatedPlayerGen() : reqReplicatedPlayerGen(nullptr) {}
  explicit PROTOBUF_CONSTEXPR reqReplicatedPlayerGen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reqReplicatedPlayerGen(const reqReplicatedPlayerGen& from);
  reqReplicatedPlayerGen(reqReplicatedPlayerGen&& from) noexcept
    : reqReplicatedPlayerGen() {
    *this = ::std::move(from);
  }

  inline reqReplicatedPlayerGen& operator=(const reqReplicatedPlayerGen& from) {
    CopyFrom(from);
    return *this;
  }
  inline reqReplicatedPlayerGen& operator=(reqReplicatedPlayerGen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reqReplicatedPlayerGen& default_instance() {
    return *internal_default_instance();
  }
  static inline const reqReplicatedPlayerGen* internal_default_instance() {
    return reinterpret_cast<const reqReplicatedPlayerGen*>(
               &_reqReplicatedPlayerGen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(reqReplicatedPlayerGen& a, reqReplicatedPlayerGen& b) {
    a.Swap(&b);
  }
  inline void Swap(reqReplicatedPlayerGen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reqReplicatedPlayerGen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reqReplicatedPlayerGen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reqReplicatedPlayerGen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const reqReplicatedPlayerGen& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const reqReplicatedPlayerGen& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.reqReplicatedPlayerGen";
  }
  protected:
  explicit reqReplicatedPlayerGen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CKPacket.reqReplicatedPlayerGen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_item_2eproto;
};
// -------------------------------------------------------------------

class reqReplicatedPlayerDes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.reqReplicatedPlayerDes) */ {
 public:
  inline reqReplicatedPlayerDes() : reqReplicatedPlayerDes(nullptr) {}
  ~reqReplicatedPlayerDes() override;
  explicit PROTOBUF_CONSTEXPR reqReplicatedPlayerDes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reqReplicatedPlayerDes(const reqReplicatedPlayerDes& from);
  reqReplicatedPlayerDes(reqReplicatedPlayerDes&& from) noexcept
    : reqReplicatedPlayerDes() {
    *this = ::std::move(from);
  }

  inline reqReplicatedPlayerDes& operator=(const reqReplicatedPlayerDes& from) {
    CopyFrom(from);
    return *this;
  }
  inline reqReplicatedPlayerDes& operator=(reqReplicatedPlayerDes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reqReplicatedPlayerDes& default_instance() {
    return *internal_default_instance();
  }
  static inline const reqReplicatedPlayerDes* internal_default_instance() {
    return reinterpret_cast<const reqReplicatedPlayerDes*>(
               &_reqReplicatedPlayerDes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(reqReplicatedPlayerDes& a, reqReplicatedPlayerDes& b) {
    a.Swap(&b);
  }
  inline void Swap(reqReplicatedPlayerDes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reqReplicatedPlayerDes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reqReplicatedPlayerDes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reqReplicatedPlayerDes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reqReplicatedPlayerDes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const reqReplicatedPlayerDes& from) {
    reqReplicatedPlayerDes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reqReplicatedPlayerDes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.reqReplicatedPlayerDes";
  }
  protected:
  explicit reqReplicatedPlayerDes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // optional int32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.reqReplicatedPlayerDes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_item_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// resPlayerJoin

// -------------------------------------------------------------------

// reqPing

// -------------------------------------------------------------------

// resPing

// -------------------------------------------------------------------

// reqPlayerPosition

// optional float x = 1;
inline bool reqPlayerPosition::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool reqPlayerPosition::has_x() const {
  return _internal_has_x();
}
inline void reqPlayerPosition::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float reqPlayerPosition::_internal_x() const {
  return _impl_.x_;
}
inline float reqPlayerPosition::x() const {
  // @@protoc_insertion_point(field_get:CKPacket.reqPlayerPosition.x)
  return _internal_x();
}
inline void reqPlayerPosition::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void reqPlayerPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CKPacket.reqPlayerPosition.x)
}

// optional float y = 2;
inline bool reqPlayerPosition::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool reqPlayerPosition::has_y() const {
  return _internal_has_y();
}
inline void reqPlayerPosition::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float reqPlayerPosition::_internal_y() const {
  return _impl_.y_;
}
inline float reqPlayerPosition::y() const {
  // @@protoc_insertion_point(field_get:CKPacket.reqPlayerPosition.y)
  return _internal_y();
}
inline void reqPlayerPosition::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void reqPlayerPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CKPacket.reqPlayerPosition.y)
}

// optional float z = 3;
inline bool reqPlayerPosition::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool reqPlayerPosition::has_z() const {
  return _internal_has_z();
}
inline void reqPlayerPosition::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float reqPlayerPosition::_internal_z() const {
  return _impl_.z_;
}
inline float reqPlayerPosition::z() const {
  // @@protoc_insertion_point(field_get:CKPacket.reqPlayerPosition.z)
  return _internal_z();
}
inline void reqPlayerPosition::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void reqPlayerPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CKPacket.reqPlayerPosition.z)
}

// optional int32 index = 4;
inline bool reqPlayerPosition::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool reqPlayerPosition::has_index() const {
  return _internal_has_index();
}
inline void reqPlayerPosition::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t reqPlayerPosition::_internal_index() const {
  return _impl_.index_;
}
inline int32_t reqPlayerPosition::index() const {
  // @@protoc_insertion_point(field_get:CKPacket.reqPlayerPosition.index)
  return _internal_index();
}
inline void reqPlayerPosition::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void reqPlayerPosition::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CKPacket.reqPlayerPosition.index)
}

// -------------------------------------------------------------------

// resPlayerPosition

// optional float x = 1;
inline bool resPlayerPosition::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool resPlayerPosition::has_x() const {
  return _internal_has_x();
}
inline void resPlayerPosition::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float resPlayerPosition::_internal_x() const {
  return _impl_.x_;
}
inline float resPlayerPosition::x() const {
  // @@protoc_insertion_point(field_get:CKPacket.resPlayerPosition.x)
  return _internal_x();
}
inline void resPlayerPosition::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void resPlayerPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CKPacket.resPlayerPosition.x)
}

// optional float y = 2;
inline bool resPlayerPosition::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool resPlayerPosition::has_y() const {
  return _internal_has_y();
}
inline void resPlayerPosition::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float resPlayerPosition::_internal_y() const {
  return _impl_.y_;
}
inline float resPlayerPosition::y() const {
  // @@protoc_insertion_point(field_get:CKPacket.resPlayerPosition.y)
  return _internal_y();
}
inline void resPlayerPosition::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void resPlayerPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CKPacket.resPlayerPosition.y)
}

// optional float z = 3;
inline bool resPlayerPosition::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool resPlayerPosition::has_z() const {
  return _internal_has_z();
}
inline void resPlayerPosition::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float resPlayerPosition::_internal_z() const {
  return _impl_.z_;
}
inline float resPlayerPosition::z() const {
  // @@protoc_insertion_point(field_get:CKPacket.resPlayerPosition.z)
  return _internal_z();
}
inline void resPlayerPosition::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void resPlayerPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CKPacket.resPlayerPosition.z)
}

// optional int32 index = 4;
inline bool resPlayerPosition::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool resPlayerPosition::has_index() const {
  return _internal_has_index();
}
inline void resPlayerPosition::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t resPlayerPosition::_internal_index() const {
  return _impl_.index_;
}
inline int32_t resPlayerPosition::index() const {
  // @@protoc_insertion_point(field_get:CKPacket.resPlayerPosition.index)
  return _internal_index();
}
inline void resPlayerPosition::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.index_ = value;
}
inline void resPlayerPosition::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CKPacket.resPlayerPosition.index)
}

// -------------------------------------------------------------------

// resReplicatedPlayerGen

// optional int32 index = 1;
inline bool resReplicatedPlayerGen::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool resReplicatedPlayerGen::has_index() const {
  return _internal_has_index();
}
inline void resReplicatedPlayerGen::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t resReplicatedPlayerGen::_internal_index() const {
  return _impl_.index_;
}
inline int32_t resReplicatedPlayerGen::index() const {
  // @@protoc_insertion_point(field_get:CKPacket.resReplicatedPlayerGen.index)
  return _internal_index();
}
inline void resReplicatedPlayerGen::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_ = value;
}
inline void resReplicatedPlayerGen::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CKPacket.resReplicatedPlayerGen.index)
}

// -------------------------------------------------------------------

// resReplicatedPlayerDes

// optional int32 index = 1;
inline bool resReplicatedPlayerDes::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool resReplicatedPlayerDes::has_index() const {
  return _internal_has_index();
}
inline void resReplicatedPlayerDes::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t resReplicatedPlayerDes::_internal_index() const {
  return _impl_.index_;
}
inline int32_t resReplicatedPlayerDes::index() const {
  // @@protoc_insertion_point(field_get:CKPacket.resReplicatedPlayerDes.index)
  return _internal_index();
}
inline void resReplicatedPlayerDes::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_ = value;
}
inline void resReplicatedPlayerDes::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CKPacket.resReplicatedPlayerDes.index)
}

// -------------------------------------------------------------------

// reqReplicatedPlayerGen

// -------------------------------------------------------------------

// reqReplicatedPlayerDes

// optional int32 index = 1;
inline bool reqReplicatedPlayerDes::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool reqReplicatedPlayerDes::has_index() const {
  return _internal_has_index();
}
inline void reqReplicatedPlayerDes::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t reqReplicatedPlayerDes::_internal_index() const {
  return _impl_.index_;
}
inline int32_t reqReplicatedPlayerDes::index() const {
  // @@protoc_insertion_point(field_get:CKPacket.reqReplicatedPlayerDes.index)
  return _internal_index();
}
inline void reqReplicatedPlayerDes::_internal_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_ = value;
}
inline void reqReplicatedPlayerDes::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CKPacket.reqReplicatedPlayerDes.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CKPacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_item_2eproto

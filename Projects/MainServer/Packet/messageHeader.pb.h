// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageHeader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messageHeader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messageHeader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messageHeader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messageHeader_2eproto;
namespace CKPacket {
class messageHeader;
struct messageHeaderDefaultTypeInternal;
extern messageHeaderDefaultTypeInternal _messageHeader_default_instance_;
}  // namespace CKPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::CKPacket::messageHeader* Arena::CreateMaybeMessage<::CKPacket::messageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CKPacket {

// ===================================================================

class messageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKPacket.messageHeader) */ {
 public:
  inline messageHeader() : messageHeader(nullptr) {}
  ~messageHeader() override;
  explicit PROTOBUF_CONSTEXPR messageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  messageHeader(const messageHeader& from);
  messageHeader(messageHeader&& from) noexcept
    : messageHeader() {
    *this = ::std::move(from);
  }

  inline messageHeader& operator=(const messageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline messageHeader& operator=(messageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const messageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const messageHeader* internal_default_instance() {
    return reinterpret_cast<const messageHeader*>(
               &_messageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(messageHeader& a, messageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(messageHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(messageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  messageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<messageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const messageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const messageHeader& from) {
    messageHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(messageHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKPacket.messageHeader";
  }
  protected:
  explicit messageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kArrFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kArrSizeFieldNumber = 4,
  };
  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional bytes arr = 3;
  bool has_arr() const;
  private:
  bool _internal_has_arr() const;
  public:
  void clear_arr();
  const std::string& arr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arr();
  PROTOBUF_NODISCARD std::string* release_arr();
  void set_allocated_arr(std::string* arr);
  private:
  const std::string& _internal_arr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arr(const std::string& value);
  std::string* _internal_mutable_arr();
  public:

  // optional uint32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  uint32_t userid() const;
  void set_userid(uint32_t value);
  private:
  uint32_t _internal_userid() const;
  void _internal_set_userid(uint32_t value);
  public:

  // optional uint32 arrSize = 4;
  bool has_arrsize() const;
  private:
  bool _internal_has_arrsize() const;
  public:
  void clear_arrsize();
  uint32_t arrsize() const;
  void set_arrsize(uint32_t value);
  private:
  uint32_t _internal_arrsize() const;
  void _internal_set_arrsize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKPacket.messageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arr_;
    uint32_t userid_;
    uint32_t arrsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// messageHeader

// optional uint32 userId = 1;
inline bool messageHeader::_internal_has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool messageHeader::has_userid() const {
  return _internal_has_userid();
}
inline void messageHeader::clear_userid() {
  _impl_.userid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t messageHeader::_internal_userid() const {
  return _impl_.userid_;
}
inline uint32_t messageHeader::userid() const {
  // @@protoc_insertion_point(field_get:CKPacket.messageHeader.userId)
  return _internal_userid();
}
inline void messageHeader::_internal_set_userid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.userid_ = value;
}
inline void messageHeader::set_userid(uint32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CKPacket.messageHeader.userId)
}

// optional string type = 2;
inline bool messageHeader::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool messageHeader::has_type() const {
  return _internal_has_type();
}
inline void messageHeader::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& messageHeader::type() const {
  // @@protoc_insertion_point(field_get:CKPacket.messageHeader.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void messageHeader::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKPacket.messageHeader.type)
}
inline std::string* messageHeader::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CKPacket.messageHeader.type)
  return _s;
}
inline const std::string& messageHeader::_internal_type() const {
  return _impl_.type_.Get();
}
inline void messageHeader::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* messageHeader::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* messageHeader::release_type() {
  // @@protoc_insertion_point(field_release:CKPacket.messageHeader.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void messageHeader::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKPacket.messageHeader.type)
}

// optional bytes arr = 3;
inline bool messageHeader::_internal_has_arr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool messageHeader::has_arr() const {
  return _internal_has_arr();
}
inline void messageHeader::clear_arr() {
  _impl_.arr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& messageHeader::arr() const {
  // @@protoc_insertion_point(field_get:CKPacket.messageHeader.arr)
  return _internal_arr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void messageHeader::set_arr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.arr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKPacket.messageHeader.arr)
}
inline std::string* messageHeader::mutable_arr() {
  std::string* _s = _internal_mutable_arr();
  // @@protoc_insertion_point(field_mutable:CKPacket.messageHeader.arr)
  return _s;
}
inline const std::string& messageHeader::_internal_arr() const {
  return _impl_.arr_.Get();
}
inline void messageHeader::_internal_set_arr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.arr_.Set(value, GetArenaForAllocation());
}
inline std::string* messageHeader::_internal_mutable_arr() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.arr_.Mutable(GetArenaForAllocation());
}
inline std::string* messageHeader::release_arr() {
  // @@protoc_insertion_point(field_release:CKPacket.messageHeader.arr)
  if (!_internal_has_arr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.arr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arr_.IsDefault()) {
    _impl_.arr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void messageHeader::set_allocated_arr(std::string* arr) {
  if (arr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.arr_.SetAllocated(arr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arr_.IsDefault()) {
    _impl_.arr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKPacket.messageHeader.arr)
}

// optional uint32 arrSize = 4;
inline bool messageHeader::_internal_has_arrsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool messageHeader::has_arrsize() const {
  return _internal_has_arrsize();
}
inline void messageHeader::clear_arrsize() {
  _impl_.arrsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t messageHeader::_internal_arrsize() const {
  return _impl_.arrsize_;
}
inline uint32_t messageHeader::arrsize() const {
  // @@protoc_insertion_point(field_get:CKPacket.messageHeader.arrSize)
  return _internal_arrsize();
}
inline void messageHeader::_internal_set_arrsize(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.arrsize_ = value;
}
inline void messageHeader::set_arrsize(uint32_t value) {
  _internal_set_arrsize(value);
  // @@protoc_insertion_point(field_set:CKPacket.messageHeader.arrSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CKPacket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messageHeader_2eproto
